// Code generated by counterfeiter. DO NOT EDIT.
package buildfakes

import (
	"context"
	"sync"

	"github.com/google/go-containerregistry/pkg/authn"
	v1a "github.com/google/go-containerregistry/pkg/v1"
	"github.com/in-toto/in-toto-golang/in_toto"
	"github.com/pivotal/kpack/pkg/apis/build/v1alpha2"
	"github.com/pivotal/kpack/pkg/cnb"
	"github.com/pivotal/kpack/pkg/reconciler/build"
	"github.com/pivotal/kpack/pkg/slsa"
	"github.com/secure-systems-lab/go-securesystemslib/dsse"
	v1 "k8s.io/api/core/v1"
)

type FakeSLSAAttester struct {
	AttestBuildStub        func(*v1alpha2.Build, *cnb.BuildMetadata, *v1.Pod, authn.Keychain, slsa.BuilderID, ...slsa.BuilderDependencyFn) (in_toto.Statement, error)
	attestBuildMutex       sync.RWMutex
	attestBuildArgsForCall []struct {
		arg1 *v1alpha2.Build
		arg2 *cnb.BuildMetadata
		arg3 *v1.Pod
		arg4 authn.Keychain
		arg5 slsa.BuilderID
		arg6 []slsa.BuilderDependencyFn
	}
	attestBuildReturns struct {
		result1 in_toto.Statement
		result2 error
	}
	attestBuildReturnsOnCall map[int]struct {
		result1 in_toto.Statement
		result2 error
	}
	SignStub        func(context.Context, in_toto.Statement, ...dsse.Signer) ([]byte, error)
	signMutex       sync.RWMutex
	signArgsForCall []struct {
		arg1 context.Context
		arg2 in_toto.Statement
		arg3 []dsse.Signer
	}
	signReturns struct {
		result1 []byte
		result2 error
	}
	signReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	WriteStub        func(context.Context, string, []byte, authn.Keychain) (v1a.Image, string, error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []byte
		arg4 authn.Keychain
	}
	writeReturns struct {
		result1 v1a.Image
		result2 string
		result3 error
	}
	writeReturnsOnCall map[int]struct {
		result1 v1a.Image
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSLSAAttester) AttestBuild(arg1 *v1alpha2.Build, arg2 *cnb.BuildMetadata, arg3 *v1.Pod, arg4 authn.Keychain, arg5 slsa.BuilderID, arg6 ...slsa.BuilderDependencyFn) (in_toto.Statement, error) {
	fake.attestBuildMutex.Lock()
	ret, specificReturn := fake.attestBuildReturnsOnCall[len(fake.attestBuildArgsForCall)]
	fake.attestBuildArgsForCall = append(fake.attestBuildArgsForCall, struct {
		arg1 *v1alpha2.Build
		arg2 *cnb.BuildMetadata
		arg3 *v1.Pod
		arg4 authn.Keychain
		arg5 slsa.BuilderID
		arg6 []slsa.BuilderDependencyFn
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.AttestBuildStub
	fakeReturns := fake.attestBuildReturns
	fake.recordInvocation("AttestBuild", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.attestBuildMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSLSAAttester) AttestBuildCallCount() int {
	fake.attestBuildMutex.RLock()
	defer fake.attestBuildMutex.RUnlock()
	return len(fake.attestBuildArgsForCall)
}

func (fake *FakeSLSAAttester) AttestBuildCalls(stub func(*v1alpha2.Build, *cnb.BuildMetadata, *v1.Pod, authn.Keychain, slsa.BuilderID, ...slsa.BuilderDependencyFn) (in_toto.Statement, error)) {
	fake.attestBuildMutex.Lock()
	defer fake.attestBuildMutex.Unlock()
	fake.AttestBuildStub = stub
}

func (fake *FakeSLSAAttester) AttestBuildArgsForCall(i int) (*v1alpha2.Build, *cnb.BuildMetadata, *v1.Pod, authn.Keychain, slsa.BuilderID, []slsa.BuilderDependencyFn) {
	fake.attestBuildMutex.RLock()
	defer fake.attestBuildMutex.RUnlock()
	argsForCall := fake.attestBuildArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeSLSAAttester) AttestBuildReturns(result1 in_toto.Statement, result2 error) {
	fake.attestBuildMutex.Lock()
	defer fake.attestBuildMutex.Unlock()
	fake.AttestBuildStub = nil
	fake.attestBuildReturns = struct {
		result1 in_toto.Statement
		result2 error
	}{result1, result2}
}

func (fake *FakeSLSAAttester) AttestBuildReturnsOnCall(i int, result1 in_toto.Statement, result2 error) {
	fake.attestBuildMutex.Lock()
	defer fake.attestBuildMutex.Unlock()
	fake.AttestBuildStub = nil
	if fake.attestBuildReturnsOnCall == nil {
		fake.attestBuildReturnsOnCall = make(map[int]struct {
			result1 in_toto.Statement
			result2 error
		})
	}
	fake.attestBuildReturnsOnCall[i] = struct {
		result1 in_toto.Statement
		result2 error
	}{result1, result2}
}

func (fake *FakeSLSAAttester) Sign(arg1 context.Context, arg2 in_toto.Statement, arg3 ...dsse.Signer) ([]byte, error) {
	fake.signMutex.Lock()
	ret, specificReturn := fake.signReturnsOnCall[len(fake.signArgsForCall)]
	fake.signArgsForCall = append(fake.signArgsForCall, struct {
		arg1 context.Context
		arg2 in_toto.Statement
		arg3 []dsse.Signer
	}{arg1, arg2, arg3})
	stub := fake.SignStub
	fakeReturns := fake.signReturns
	fake.recordInvocation("Sign", []interface{}{arg1, arg2, arg3})
	fake.signMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSLSAAttester) SignCallCount() int {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	return len(fake.signArgsForCall)
}

func (fake *FakeSLSAAttester) SignCalls(stub func(context.Context, in_toto.Statement, ...dsse.Signer) ([]byte, error)) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = stub
}

func (fake *FakeSLSAAttester) SignArgsForCall(i int) (context.Context, in_toto.Statement, []dsse.Signer) {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	argsForCall := fake.signArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSLSAAttester) SignReturns(result1 []byte, result2 error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = nil
	fake.signReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeSLSAAttester) SignReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = nil
	if fake.signReturnsOnCall == nil {
		fake.signReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.signReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeSLSAAttester) Write(arg1 context.Context, arg2 string, arg3 []byte, arg4 authn.Keychain) (v1a.Image, string, error) {
	var arg3Copy []byte
	if arg3 != nil {
		arg3Copy = make([]byte, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []byte
		arg4 authn.Keychain
	}{arg1, arg2, arg3Copy, arg4})
	stub := fake.WriteStub
	fakeReturns := fake.writeReturns
	fake.recordInvocation("Write", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.writeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeSLSAAttester) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeSLSAAttester) WriteCalls(stub func(context.Context, string, []byte, authn.Keychain) (v1a.Image, string, error)) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = stub
}

func (fake *FakeSLSAAttester) WriteArgsForCall(i int) (context.Context, string, []byte, authn.Keychain) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	argsForCall := fake.writeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSLSAAttester) WriteReturns(result1 v1a.Image, result2 string, result3 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 v1a.Image
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSLSAAttester) WriteReturnsOnCall(i int, result1 v1a.Image, result2 string, result3 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 v1a.Image
			result2 string
			result3 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 v1a.Image
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSLSAAttester) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.attestBuildMutex.RLock()
	defer fake.attestBuildMutex.RUnlock()
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSLSAAttester) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ build.SLSAAttester = new(FakeSLSAAttester)

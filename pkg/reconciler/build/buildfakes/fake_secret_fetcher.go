// Code generated by counterfeiter. DO NOT EDIT.
package buildfakes

import (
	"context"
	"sync"

	"github.com/pivotal/kpack/pkg/reconciler/build"
	v1 "k8s.io/api/core/v1"
)

type FakeSecretFetcher struct {
	SecretsForServiceAccountStub        func(context.Context, string, string) ([]*v1.Secret, error)
	secretsForServiceAccountMutex       sync.RWMutex
	secretsForServiceAccountArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	secretsForServiceAccountReturns struct {
		result1 []*v1.Secret
		result2 error
	}
	secretsForServiceAccountReturnsOnCall map[int]struct {
		result1 []*v1.Secret
		result2 error
	}
	SecretsForSystemServiceAccountStub        func(context.Context) ([]*v1.Secret, error)
	secretsForSystemServiceAccountMutex       sync.RWMutex
	secretsForSystemServiceAccountArgsForCall []struct {
		arg1 context.Context
	}
	secretsForSystemServiceAccountReturns struct {
		result1 []*v1.Secret
		result2 error
	}
	secretsForSystemServiceAccountReturnsOnCall map[int]struct {
		result1 []*v1.Secret
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecretFetcher) SecretsForServiceAccount(arg1 context.Context, arg2 string, arg3 string) ([]*v1.Secret, error) {
	fake.secretsForServiceAccountMutex.Lock()
	ret, specificReturn := fake.secretsForServiceAccountReturnsOnCall[len(fake.secretsForServiceAccountArgsForCall)]
	fake.secretsForServiceAccountArgsForCall = append(fake.secretsForServiceAccountArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.SecretsForServiceAccountStub
	fakeReturns := fake.secretsForServiceAccountReturns
	fake.recordInvocation("SecretsForServiceAccount", []interface{}{arg1, arg2, arg3})
	fake.secretsForServiceAccountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretFetcher) SecretsForServiceAccountCallCount() int {
	fake.secretsForServiceAccountMutex.RLock()
	defer fake.secretsForServiceAccountMutex.RUnlock()
	return len(fake.secretsForServiceAccountArgsForCall)
}

func (fake *FakeSecretFetcher) SecretsForServiceAccountCalls(stub func(context.Context, string, string) ([]*v1.Secret, error)) {
	fake.secretsForServiceAccountMutex.Lock()
	defer fake.secretsForServiceAccountMutex.Unlock()
	fake.SecretsForServiceAccountStub = stub
}

func (fake *FakeSecretFetcher) SecretsForServiceAccountArgsForCall(i int) (context.Context, string, string) {
	fake.secretsForServiceAccountMutex.RLock()
	defer fake.secretsForServiceAccountMutex.RUnlock()
	argsForCall := fake.secretsForServiceAccountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSecretFetcher) SecretsForServiceAccountReturns(result1 []*v1.Secret, result2 error) {
	fake.secretsForServiceAccountMutex.Lock()
	defer fake.secretsForServiceAccountMutex.Unlock()
	fake.SecretsForServiceAccountStub = nil
	fake.secretsForServiceAccountReturns = struct {
		result1 []*v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretFetcher) SecretsForServiceAccountReturnsOnCall(i int, result1 []*v1.Secret, result2 error) {
	fake.secretsForServiceAccountMutex.Lock()
	defer fake.secretsForServiceAccountMutex.Unlock()
	fake.SecretsForServiceAccountStub = nil
	if fake.secretsForServiceAccountReturnsOnCall == nil {
		fake.secretsForServiceAccountReturnsOnCall = make(map[int]struct {
			result1 []*v1.Secret
			result2 error
		})
	}
	fake.secretsForServiceAccountReturnsOnCall[i] = struct {
		result1 []*v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretFetcher) SecretsForSystemServiceAccount(arg1 context.Context) ([]*v1.Secret, error) {
	fake.secretsForSystemServiceAccountMutex.Lock()
	ret, specificReturn := fake.secretsForSystemServiceAccountReturnsOnCall[len(fake.secretsForSystemServiceAccountArgsForCall)]
	fake.secretsForSystemServiceAccountArgsForCall = append(fake.secretsForSystemServiceAccountArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.SecretsForSystemServiceAccountStub
	fakeReturns := fake.secretsForSystemServiceAccountReturns
	fake.recordInvocation("SecretsForSystemServiceAccount", []interface{}{arg1})
	fake.secretsForSystemServiceAccountMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretFetcher) SecretsForSystemServiceAccountCallCount() int {
	fake.secretsForSystemServiceAccountMutex.RLock()
	defer fake.secretsForSystemServiceAccountMutex.RUnlock()
	return len(fake.secretsForSystemServiceAccountArgsForCall)
}

func (fake *FakeSecretFetcher) SecretsForSystemServiceAccountCalls(stub func(context.Context) ([]*v1.Secret, error)) {
	fake.secretsForSystemServiceAccountMutex.Lock()
	defer fake.secretsForSystemServiceAccountMutex.Unlock()
	fake.SecretsForSystemServiceAccountStub = stub
}

func (fake *FakeSecretFetcher) SecretsForSystemServiceAccountArgsForCall(i int) context.Context {
	fake.secretsForSystemServiceAccountMutex.RLock()
	defer fake.secretsForSystemServiceAccountMutex.RUnlock()
	argsForCall := fake.secretsForSystemServiceAccountArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretFetcher) SecretsForSystemServiceAccountReturns(result1 []*v1.Secret, result2 error) {
	fake.secretsForSystemServiceAccountMutex.Lock()
	defer fake.secretsForSystemServiceAccountMutex.Unlock()
	fake.SecretsForSystemServiceAccountStub = nil
	fake.secretsForSystemServiceAccountReturns = struct {
		result1 []*v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretFetcher) SecretsForSystemServiceAccountReturnsOnCall(i int, result1 []*v1.Secret, result2 error) {
	fake.secretsForSystemServiceAccountMutex.Lock()
	defer fake.secretsForSystemServiceAccountMutex.Unlock()
	fake.SecretsForSystemServiceAccountStub = nil
	if fake.secretsForSystemServiceAccountReturnsOnCall == nil {
		fake.secretsForSystemServiceAccountReturnsOnCall = make(map[int]struct {
			result1 []*v1.Secret
			result2 error
		})
	}
	fake.secretsForSystemServiceAccountReturnsOnCall[i] = struct {
		result1 []*v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.secretsForServiceAccountMutex.RLock()
	defer fake.secretsForServiceAccountMutex.RUnlock()
	fake.secretsForSystemServiceAccountMutex.RLock()
	defer fake.secretsForSystemServiceAccountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecretFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ build.SecretFetcher = new(FakeSecretFetcher)
